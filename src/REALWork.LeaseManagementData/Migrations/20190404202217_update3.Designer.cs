// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using REALWork.LeaseManagementData;

namespace REALWork.LeaseManagementData.Migrations
{
    [DbContext(typeof(AppLeaseManagementDbContext))]
    [Migration("20190404202217_update3")]
    partial class update3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AddressStateProv")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AddressStreetNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AddressZipPostCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactEmial")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("ContactOthers")
                        .HasMaxLength(250);

                    b.Property<string>("ContztTel")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsPropertyManager")
                        .HasColumnName("isPropertyManager");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LeaseId");

                    b.Property<DateTime>("Modified");

                    b.HasKey("Id");

                    b.HasIndex("LeaseId");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Lease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("DamageDepositAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAddendumAvailable");

                    b.Property<string>("LeaseAgreementDocUrl")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("LeaseDesc")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("LeaseEndDate");

                    b.Property<DateTime>("LeaseSignDate");

                    b.Property<DateTime>("LeaseStartDate");

                    b.Property<string>("LeaseTitle")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Notes");

                    b.Property<decimal?>("PetDepositAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("RentAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("RentDueOn")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("RentFrequency")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("RentalPropertyId");

                    b.Property<string>("Term")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RentalPropertyId");

                    b.ToTable("Lease");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.NewTenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("ContactOthers")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ContactTelephone1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactTelephone2")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NewTenant");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.PropertyVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<decimal>("HoursSpent")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("MileageDriven")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Notes");

                    b.Property<int>("RentalPropertyId");

                    b.Property<string>("TimeSpent")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<DateTime>("VisitDate");

                    b.Property<string>("VisitEndTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("VisitPurpose")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("VisitStartTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RentalPropertyId");

                    b.ToTable("PropertyVisit");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.RentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActualPaymentAmt")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("ActualPaymentDate");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int>("InChargeTenantId");

                    b.Property<bool>("IsOnTime");

                    b.Property<int>("LeaseId");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Note")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("PaymentDueDate");

                    b.Property<decimal>("ScheduledPaymentAmt")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("LeaseId");

                    b.ToTable("RentPayment");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.RentalProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsBasementSuite");

                    b.Property<bool>("IsShared");

                    b.Property<int>("ListinglId");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Notes")
                        .HasMaxLength(450);

                    b.Property<int>("NumberOfBathrooms");

                    b.Property<int>("NumberOfBedrooms");

                    b.Property<int>("NumberOfLayers");

                    b.Property<int>("NumberOfParking");

                    b.Property<int>("OriginalId");

                    b.Property<string>("PmUserName");

                    b.Property<int>("PropertyBuildYear");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TotalLivingArea");

                    b.HasKey("Id");

                    b.ToTable("RentalProperty");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("ContactOthers")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ContactTelephone1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactTelephone2")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LeaseId");

                    b.Property<DateTime>("Modified");

                    b.Property<bool>("OnlineAccessEnbaled");

                    b.Property<int>("RoleId");

                    b.Property<string>("UserAvartaImgUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('default')")
                        .HasMaxLength(200);

                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('tba')")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("LeaseId");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Modified");

                    b.Property<bool>("OnlineAccessEnbaled");

                    b.Property<int>("RoleId");

                    b.Property<DateTime>("UpdateDate");

                    b.Property<string>("UserAvartaImgUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VendorBusinessName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("VendorContactEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("VendorContactOthers")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("VendorContactTelephone1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("VendorDesc")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("VendorSpecialty")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("EndDate");

                    b.Property<decimal>("InvoiceAmount");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceDocUrl")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<bool>("IsEmergency");

                    b.Property<bool>("IsOwnerAuthorized");

                    b.Property<bool>("IsPaid");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Note")
                        .HasMaxLength(550);

                    b.Property<decimal?>("PaymentAmount");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("RecordCreationDate");

                    b.Property<DateTime?>("RecordUpdateDate");

                    b.Property<int>("RentalPropertyId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("VendorId");

                    b.Property<string>("WorkOrderCategory")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("WorkOrderDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("WorkOrderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WorkOrderStatus")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("WorkOrderType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RentalPropertyId");

                    b.HasIndex("VendorId");

                    b.ToTable("WorkOrder");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Agent", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.Lease", "Lease")
                        .WithMany("Agent")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("FK_Agent_Lease");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Lease", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.RentalProperty", "RentalProperty")
                        .WithMany("Lease")
                        .HasForeignKey("RentalPropertyId")
                        .HasConstraintName("FK_Lease_RentalProperty");

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.RentCoverage", "RentCoverage", b1 =>
                        {
                            b1.Property<int>("LeaseId");

                            b1.Property<bool>("Cablevison");

                            b1.Property<bool>("Carpets");

                            b1.Property<bool>("Dishwasher");

                            b1.Property<bool>("Electricity");

                            b1.Property<bool>("FreeLaundry");

                            b1.Property<bool>("Furniture");

                            b1.Property<bool>("GarbageCollection");

                            b1.Property<bool>("Heat");

                            b1.Property<bool>("Internet");

                            b1.Property<bool>("KitchenScrapCollection");

                            b1.Property<bool>("Laundry");

                            b1.Property<bool>("NaturalGas");

                            b1.Property<string>("Other");

                            b1.Property<int>("ParkingStall");

                            b1.Property<bool>("RecreationFacility");

                            b1.Property<bool>("RecycleServices");

                            b1.Property<bool>("Regigerator");

                            b1.Property<bool>("SewageDisposal");

                            b1.Property<bool>("SnowRemoval");

                            b1.Property<bool>("Storage");

                            b1.Property<bool>("StoveOven");

                            b1.Property<bool>("Water");

                            b1.Property<bool>("WindowCovering");

                            b1.HasKey("LeaseId");

                            b1.ToTable("RentCoverage");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.Lease", "Lease")
                                .WithOne("RentCoverage")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.RentCoverage", "LeaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.PropertyVisit", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.RentalProperty", "RentalProperty")
                        .WithMany("PropertyVisit")
                        .HasForeignKey("RentalPropertyId")
                        .HasConstraintName("FK_PropertyVisit_RentalProperty");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.RentPayment", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.Lease", "Lease")
                        .WithMany("RentPayment")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("FK_RentPayment_Lease");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.RentalProperty", b =>
                {
                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("RentalPropertyId");

                            b1.Property<string>("City");

                            b1.Property<string>("Country");

                            b1.Property<string>("StateProvince");

                            b1.Property<string>("StreetNum");

                            b1.Property<string>("ZipPostCode");

                            b1.HasKey("RentalPropertyId");

                            b1.ToTable("Address");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.RentalProperty", "RentalProperty")
                                .WithOne("Address")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.Address", "RentalPropertyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Tenant", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.Lease", "Lease")
                        .WithMany("Tenant")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("FK_Tenant_Lease");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.WorkOrder", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.RentalProperty", "RentalProperty")
                        .WithMany("WorkOrder")
                        .HasForeignKey("RentalPropertyId")
                        .HasConstraintName("FK_WorkOrder_RentalProperty");

                    b.HasOne("REALWork.LeaseManagementCore.Entities.Vendor", "Vendor")
                        .WithMany("WorkOrder")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_WorkOrder_Vendor");
                });
#pragma warning restore 612, 618
        }
    }
}
