// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using REALWork.LeaseManagementData;

namespace REALWork.LeaseManagementData.Migrations
{
    [DbContext(typeof(AppLeaseManagementDbContext))]
    partial class AppLeaseManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressCity")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AddressCountry")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AddressStateProv")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AddressStreetNumber")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AddressZipPostCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactEmial")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("ContactOthers")
                        .HasMaxLength(250);

                    b.Property<string>("ContztTel")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsPropertyManager")
                        .HasColumnName("isPropertyManager");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LeaseId");

                    b.Property<DateTime>("Modified");

                    b.HasKey("Id");

                    b.HasIndex("LeaseId");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("InvoiceAmount");

                    b.Property<DateTime>("InvoiceDate");

                    b.Property<string>("InvoiceDocUrl");

                    b.Property<string>("InvoiceTitle");

                    b.Property<bool>("IsPaid");

                    b.Property<DateTime>("Modified");

                    b.Property<decimal?>("PaymentAmount");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("PaymentMethod");

                    b.Property<int>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId")
                        .IsUnique();

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Lease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<decimal>("DamageDepositAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("EndLeaseCode");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAddendumAvailable");

                    b.Property<string>("LeaseAgreementDocUrl")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("LeaseDesc")
                        .HasMaxLength(4000);

                    b.Property<DateTime>("LeaseEndDate");

                    b.Property<DateTime>("LeaseSignDate");

                    b.Property<DateTime>("LeaseStartDate");

                    b.Property<string>("LeaseTitle")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Notes");

                    b.Property<decimal?>("PetDepositAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("RenewTerm");

                    b.Property<decimal>("RentAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("RentDueOn")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("RentFrequency")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("RentalPropertyId");

                    b.Property<string>("Term")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RentalPropertyId");

                    b.ToTable("Lease");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.NewTenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("ContactOthers")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ContactTelephone1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactTelephone2")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NewTenant");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.PropertyInspection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("LeaseId");

                    b.Property<DateTime>("Modified");

                    b.Property<DateTime>("MoveInDate");

                    b.Property<DateTime>("MoveInInspectionDate");

                    b.Property<string>("MoveInInspectionReportDocUrl");

                    b.Property<DateTime>("MoveOutDate");

                    b.Property<string>("MoveOutInspectionReportDocUrl");

                    b.Property<DateTime>("MoveOutIspectionDate");

                    b.HasKey("Id");

                    b.HasIndex("LeaseId");

                    b.ToTable("Inspection");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.PropertyVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<decimal>("HoursSpent")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("MileageDriven")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Notes");

                    b.Property<int>("RentalPropertyId");

                    b.Property<string>("TimeSpent")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdatedOn");

                    b.Property<DateTime>("VisitDate");

                    b.Property<string>("VisitEndTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("VisitPurpose")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("VisitStartTime")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RentalPropertyId");

                    b.ToTable("PropertyVisit");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.RentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActualPaymentAmt")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("Created");

                    b.Property<int>("InChargeTenantId");

                    b.Property<bool>("IsOnTime");

                    b.Property<int>("LeaseId");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Note")
                        .HasMaxLength(450);

                    b.Property<string>("PayMethod")
                        .IsRequired();

                    b.Property<DateTime?>("PaymentDueDate");

                    b.Property<DateTime?>("PaymentReceivedDate");

                    b.Property<string>("RentalForMonth");

                    b.Property<string>("RentalForYear");

                    b.Property<decimal>("ScheduledPaymentAmt")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.HasIndex("LeaseId");

                    b.ToTable("RentPayment");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.RentalProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsBasementSuite");

                    b.Property<bool>("IsShared");

                    b.Property<int>("ListinglId");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Notes")
                        .HasMaxLength(450);

                    b.Property<int>("NumberOfBathrooms");

                    b.Property<int>("NumberOfBedrooms");

                    b.Property<int>("NumberOfLayers");

                    b.Property<int>("NumberOfParking");

                    b.Property<int>("OriginalId");

                    b.Property<string>("PmUserName");

                    b.Property<int>("PropertyBuildYear");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TotalLivingArea");

                    b.HasKey("Id");

                    b.ToTable("RentalProperty");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int>("LeaseId");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Notes")
                        .HasMaxLength(450);

                    b.Property<string>("RequestDetails")
                        .HasMaxLength(1000);

                    b.Property<string>("RequestSubject");

                    b.Property<int>("RequestorId");

                    b.Property<string>("ServiceCategory");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<string>("Urgent")
                        .IsRequired();

                    b.Property<int>("WorkOrderId");

                    b.HasKey("Id");

                    b.HasIndex("LeaseId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.ServiceRequestComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Notes");

                    b.Property<int>("ResponderId");

                    b.Property<int>("ServiceRequestId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("ContactOthers")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("ContactTelephone1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ContactTelephone2")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("LeaseId");

                    b.Property<DateTime>("Modified");

                    b.Property<bool>("OnlineAccessEnbaled");

                    b.Property<int>("RoleId");

                    b.Property<string>("UserAvartaImgUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('default')")
                        .HasMaxLength(200);

                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('tba')")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("LeaseId");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("Modified");

                    b.Property<bool>("OnlineAccessEnbaled");

                    b.Property<int>("RoleId");

                    b.Property<string>("UserAvartaImgUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("VendorBusinessName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("VendorContactEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("VendorContactOthers")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("VendorContactTelephone1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("VendorDesc")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("VendorSpecialty")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsEmergency");

                    b.Property<bool>("IsOwnerAuthorized");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Note")
                        .HasMaxLength(550);

                    b.Property<int>("RentalPropertyId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("VendorId");

                    b.Property<string>("WorkOrderCategory")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("WorkOrderDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("WorkOrderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("WorkOrderStatus")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("WorkOrderType")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("RentalPropertyId");

                    b.HasIndex("VendorId");

                    b.ToTable("WorkOrder");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Agent", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.Lease", "Lease")
                        .WithMany("Agent")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("FK_Agent_Lease");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Invoice", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.WorkOrder", "WorkOrder")
                        .WithOne("Invoice")
                        .HasForeignKey("REALWork.LeaseManagementCore.Entities.Invoice", "WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Lease", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.RentalProperty", "RentalProperty")
                        .WithMany("Lease")
                        .HasForeignKey("RentalPropertyId")
                        .HasConstraintName("FK_Lease_RentalProperty");

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.RentCoverage", "RentCoverage", b1 =>
                        {
                            b1.Property<int>("LeaseId");

                            b1.Property<bool>("Cablevison");

                            b1.Property<bool>("Carpets");

                            b1.Property<bool>("Dishwasher");

                            b1.Property<bool>("Electricity");

                            b1.Property<bool>("FreeLaundry");

                            b1.Property<bool>("Furniture");

                            b1.Property<bool>("GarbageCollection");

                            b1.Property<bool>("Heat");

                            b1.Property<bool>("Internet");

                            b1.Property<bool>("KitchenScrapCollection");

                            b1.Property<bool>("Laundry");

                            b1.Property<bool>("NaturalGas");

                            b1.Property<string>("Other");

                            b1.Property<int>("ParkingStall");

                            b1.Property<bool>("RecreationFacility");

                            b1.Property<bool>("RecycleServices");

                            b1.Property<bool>("Regigerator");

                            b1.Property<bool>("SewageDisposal");

                            b1.Property<bool>("SnowRemoval");

                            b1.Property<bool>("Storage");

                            b1.Property<bool>("StoveOven");

                            b1.Property<bool>("Water");

                            b1.Property<bool>("WindowCovering");

                            b1.HasKey("LeaseId");

                            b1.ToTable("RentCoverage");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.Lease", "Lease")
                                .WithOne("RentCoverage")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.RentCoverage", "LeaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.PropertyInspection", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.Lease", "Lease")
                        .WithMany("PropertyInspection")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("FK_PriopertyInspection_Lease");

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.Basement", "BasementCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("ElectricalOutletsB");

                            b1.Property<string>("ElectricalOutletsCommentB");

                            b1.Property<string>("ElectricalOutletsCommentE");

                            b1.Property<int>("ElectricalOutletsE");

                            b1.Property<int>("FurnacePlumbingB");

                            b1.Property<string>("FurnacePlumbingCommentB");

                            b1.Property<string>("FurnacePlumbingCommentE");

                            b1.Property<int>("FurnacePlumbingE");

                            b1.Property<int>("LightingB");

                            b1.Property<string>("LightingCommentB");

                            b1.Property<string>("LightingCommentE");

                            b1.Property<int>("LightingE");

                            b1.Property<int>("StairwellB");

                            b1.Property<string>("StairwellCommentB");

                            b1.Property<string>("StairwellCommentE");

                            b1.Property<int>("StairwellE");

                            b1.Property<int>("WallsAndFloorCarpetB");

                            b1.Property<string>("WallsAndFloorCarpetCommentB");

                            b1.Property<string>("WallsAndFloorCarpetCommentE");

                            b1.Property<int>("WallsAndFloorCarpetE");

                            b1.Property<int>("WindowsCoveringB");

                            b1.Property<int>("WindowsCoveringCommentB");

                            b1.Property<int>("WindowsCoveringCommentE");

                            b1.Property<int>("WindowsCoveringE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("BasementCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("BasementCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.Basement", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.DinningRoom", "DinningRoomCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("CeilingsB");

                            b1.Property<string>("CeilingsCommentB");

                            b1.Property<string>("CeilingsCommentE");

                            b1.Property<int>("CeilingsE");

                            b1.Property<int>("ElectricalOutletsB");

                            b1.Property<string>("ElectricalOutletsCommentB");

                            b1.Property<string>("ElectricalOutletsCommentE");

                            b1.Property<int>("ElectricalOutletsE");

                            b1.Property<int>("FloorCarpetB");

                            b1.Property<string>("FloorCarpetCommentB");

                            b1.Property<string>("FloorCarpetCommentE");

                            b1.Property<int>("FloorCarpetE");

                            b1.Property<int>("LightingB");

                            b1.Property<string>("LightingCommentB");

                            b1.Property<string>("LightingCommentE");

                            b1.Property<int>("LightingE");

                            b1.Property<int>("WallAndTrimeB");

                            b1.Property<int>("WallAndTrimeE");

                            b1.Property<string>("WallAndTrimsCommentB");

                            b1.Property<string>("WallAndTrimsCommentE");

                            b1.Property<int>("WindowsCoveringB");

                            b1.Property<int>("WindowsCoveringCommentB");

                            b1.Property<int>("WindowsCoveringCommentE");

                            b1.Property<int>("WindowsCoveringE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("DinningRoomCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("DinningRoomCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.DinningRoom", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.Entry", "EntryCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("CeilingsB");

                            b1.Property<string>("CeilingsCommentB");

                            b1.Property<string>("CeilingsCommentE");

                            b1.Property<int>("CeilingsE");

                            b1.Property<int>("ClosetsB");

                            b1.Property<string>("ClosetsCommentB");

                            b1.Property<string>("ClosetsCommentE");

                            b1.Property<int>("ClosetsE");

                            b1.Property<int>("ElectricalOutletsB");

                            b1.Property<string>("ElectricalOutletsCommentB");

                            b1.Property<string>("ElectricalOutletsCommentE");

                            b1.Property<int>("ElectricalOutletsE");

                            b1.Property<int>("FloorCarpetB");

                            b1.Property<string>("FloorCarpetCommentB");

                            b1.Property<string>("FloorCarpetCommentE");

                            b1.Property<int>("FloorCarpetE");

                            b1.Property<int>("LightingB");

                            b1.Property<string>("LightingCommentB");

                            b1.Property<string>("LightingCommentE");

                            b1.Property<int>("LightingE");

                            b1.Property<string>("Notes");

                            b1.Property<int>("WallAndTrimeB");

                            b1.Property<int>("WallAndTrimeE");

                            b1.Property<string>("WallAndTrimsCommentB");

                            b1.Property<string>("WallAndTrimsCommentE");

                            b1.Property<int>("WindowsCoveringB");

                            b1.Property<int>("WindowsCoveringCommentB");

                            b1.Property<int>("WindowsCoveringCommentE");

                            b1.Property<int>("WindowsCoveringE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("EntryCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("EntryCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.Entry", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.Exterior", "ExteriorCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("EntrancesB");

                            b1.Property<string>("EntrancesCommentB");

                            b1.Property<string>("EntrancesCommentE");

                            b1.Property<int>("EntrancesE");

                            b1.Property<int>("GarbageContainersB");

                            b1.Property<int>("GarbageContainersCommentB");

                            b1.Property<int>("GarbageContainersCommentE");

                            b1.Property<int>("GarbageContainersE");

                            b1.Property<int>("GlassAndFramesB");

                            b1.Property<int>("GlassAndFramesCommentB");

                            b1.Property<int>("GlassAndFramesCommentE");

                            b1.Property<int>("GlassAndFramesE");

                            b1.Property<int>("GroundsAndWalksB");

                            b1.Property<int>("GroundsAndWalksCommentB");

                            b1.Property<int>("GroundsAndWalksCommentE");

                            b1.Property<int>("GroundsAndWalksE");

                            b1.Property<int>("LightingB");

                            b1.Property<string>("LightingCommentB");

                            b1.Property<string>("LightingCommentE");

                            b1.Property<int>("LightingE");

                            b1.Property<int>("PatioBalconyDoorsB");

                            b1.Property<int>("PatioBalconyDoorsCommentB");

                            b1.Property<int>("PatioBalconyDoorsCommentE");

                            b1.Property<int>("PatioBalconyDoorsE");

                            b1.Property<int>("StuccoSidingB");

                            b1.Property<int>("StuccoSidingCommentB");

                            b1.Property<int>("StuccoSidingCommentE");

                            b1.Property<int>("StuccoSidingE");

                            b1.Property<int>("WindowsCoveringB");

                            b1.Property<int>("WindowsCoveringCommentB");

                            b1.Property<int>("WindowsCoveringCommentE");

                            b1.Property<int>("WindowsCoveringE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("ExteriorCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("ExteriorCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.Exterior", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.GarageParkingArea", "GarageParkingAreaCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("ElectricalOutletsB");

                            b1.Property<string>("ElectricalOutletsCommentB");

                            b1.Property<string>("ElectricalOutletsCommentE");

                            b1.Property<int>("ElectricalOutletsE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("GarageParkingAreaCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("GarageParkingAreaCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.GarageParkingArea", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.KeyAndControl", "KeyAndControlCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<bool>("EUnitDeadlocksIssed");

                            b1.Property<bool>("EUnitDeadlocksReturned");

                            b1.Property<string>("EntranceKeysIssued");

                            b1.Property<string>("EntranceKeysReturned");

                            b1.Property<bool>("ParkingRemoteControlIssed");

                            b1.Property<bool>("ParkingRemoteControlReturned");

                            b1.Property<bool>("UnitKeysIssed");

                            b1.Property<bool>("UnitKeysReturned");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("KeyAndControlCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("KeyAndControlCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.KeyAndControl", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.Kitchen", "KitchenCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("CabinetsAndDoorsB");

                            b1.Property<string>("CabinetsAndDoorsCommentB");

                            b1.Property<string>("CabinetsAndDoorsCommentE");

                            b1.Property<int>("CabinetsAndDoorsE");

                            b1.Property<int>("CeilingsB");

                            b1.Property<string>("CeilingsCommentB");

                            b1.Property<string>("CeilingsCommentE");

                            b1.Property<int>("CeilingsE");

                            b1.Property<int>("ClosetsB");

                            b1.Property<string>("ClosetsCommentB");

                            b1.Property<string>("ClosetsCommentE");

                            b1.Property<int>("ClosetsE");

                            b1.Property<int>("CountertopB");

                            b1.Property<string>("CountertopCommentB");

                            b1.Property<string>("CountertopCommentE");

                            b1.Property<int>("CountertopE");

                            b1.Property<int>("DishwasherB");

                            b1.Property<string>("DishwasherCommentB");

                            b1.Property<string>("DishwasherCommentE");

                            b1.Property<int>("DishwasherE");

                            b1.Property<int>("ElectricalOutletsB");

                            b1.Property<string>("ElectricalOutletsCommentB");

                            b1.Property<string>("ElectricalOutletsCommentE");

                            b1.Property<int>("ElectricalOutletsE");

                            b1.Property<int>("FloorCarpetB");

                            b1.Property<string>("FloorCarpetCommentB");

                            b1.Property<string>("FloorCarpetCommentE");

                            b1.Property<int>("FloorCarpetE");

                            b1.Property<string>("HoodAndCommentFanB");

                            b1.Property<string>("HoodAndCommentFanE");

                            b1.Property<int>("HoodAndFanB");

                            b1.Property<int>("HoodAndFanE");

                            b1.Property<int>("LightingB");

                            b1.Property<string>("LightingCommentB");

                            b1.Property<string>("LightingCommentE");

                            b1.Property<int>("LightingE");

                            b1.Property<string>("Notes");

                            b1.Property<int>("OvenB");

                            b1.Property<int>("OvenCommentB");

                            b1.Property<int>("OvenCommentE");

                            b1.Property<int>("OvenE");

                            b1.Property<int>("RefrigeratorExteriorB");

                            b1.Property<string>("RefrigeratorExteriorCommentB");

                            b1.Property<string>("RefrigeratorExteriorCommentE");

                            b1.Property<int>("RefrigeratorExteriorE");

                            b1.Property<int>("RefrigeratorFreezerB");

                            b1.Property<string>("RefrigeratorFreezerCommentB");

                            b1.Property<string>("RefrigeratorFreezerCommentE");

                            b1.Property<int>("RefrigeratorFreezerE");

                            b1.Property<int>("RefrigeratorShelfB");

                            b1.Property<string>("RefrigeratorShelfCommentB");

                            b1.Property<string>("RefrigeratorShelfCommentE");

                            b1.Property<int>("RefrigeratorShelfE");

                            b1.Property<int>("StoveB");

                            b1.Property<string>("StoveCommentB");

                            b1.Property<string>("StoveCommentE");

                            b1.Property<int>("StoveE");

                            b1.Property<int>("TapsSinksB");

                            b1.Property<string>("TapsSinksCommentB");

                            b1.Property<string>("TapsSinksCommentE");

                            b1.Property<int>("TapsSinksE");

                            b1.Property<int>("WallAndTrimeB");

                            b1.Property<int>("WallAndTrimeE");

                            b1.Property<string>("WallAndTrimsCommentB");

                            b1.Property<string>("WallAndTrimsCommentE");

                            b1.Property<int>("WindowsCoveringB");

                            b1.Property<int>("WindowsCoveringCommentB");

                            b1.Property<int>("WindowsCoveringCommentE");

                            b1.Property<int>("WindowsCoveringE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("KitchenCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("KitchenCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.Kitchen", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.LivingRoom", "LivingRoomCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("AirConditionerB");

                            b1.Property<string>("AirConditionerCommentB");

                            b1.Property<string>("AirConditionerCommentE");

                            b1.Property<int>("AirConditionerE");

                            b1.Property<int>("CableTVB");

                            b1.Property<string>("CableTVCommentB");

                            b1.Property<string>("CableTVCommentE");

                            b1.Property<int>("CableTVE");

                            b1.Property<int>("CeilingsB");

                            b1.Property<string>("CeilingsCommentB");

                            b1.Property<string>("CeilingsCommentE");

                            b1.Property<int>("CeilingsE");

                            b1.Property<int>("ClosetsB");

                            b1.Property<string>("ClosetsCommentB");

                            b1.Property<string>("ClosetsCommentE");

                            b1.Property<int>("ClosetsE");

                            b1.Property<int>("ElectricalOutletsB");

                            b1.Property<string>("ElectricalOutletsCommentB");

                            b1.Property<string>("ElectricalOutletsCommentE");

                            b1.Property<int>("ElectricalOutletsE");

                            b1.Property<int>("FireplaceB");

                            b1.Property<string>("FireplaceCommentB");

                            b1.Property<string>("FireplaceCommentE");

                            b1.Property<int>("FireplaceE");

                            b1.Property<int>("FloorCarpetB");

                            b1.Property<string>("FloorCarpetCommentB");

                            b1.Property<string>("FloorCarpetCommentE");

                            b1.Property<int>("FloorCarpetE");

                            b1.Property<int>("LightingB");

                            b1.Property<string>("LightingCommentB");

                            b1.Property<string>("LightingCommentE");

                            b1.Property<int>("LightingE");

                            b1.Property<string>("Notes");

                            b1.Property<int>("WallAndTrimeB");

                            b1.Property<int>("WallAndTrimeE");

                            b1.Property<string>("WallAndTrimsCommentB");

                            b1.Property<string>("WallAndTrimsCommentE");

                            b1.Property<int>("WindowsCoveringB");

                            b1.Property<int>("WindowsCoveringCommentB");

                            b1.Property<int>("WindowsCoveringCommentE");

                            b1.Property<int>("WindowsCoveringE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("LivingRoomCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("LivingRoomCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.LivingRoom", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.MainBathroom", "MainBathroomCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("CeilingsB");

                            b1.Property<string>("CeilingsCommentB");

                            b1.Property<string>("CeilingsCommentE");

                            b1.Property<int>("CeilingsE");

                            b1.Property<int>("ClosetsB");

                            b1.Property<string>("ClosetsCommentB");

                            b1.Property<string>("ClosetsCommentE");

                            b1.Property<int>("ClosetsE");

                            b1.Property<int>("DoorB");

                            b1.Property<string>("DoorCommentB");

                            b1.Property<string>("DoorCommentE");

                            b1.Property<int>("DoorE");

                            b1.Property<int>("ElectricalOutletsB");

                            b1.Property<string>("ElectricalOutletsCommentB");

                            b1.Property<string>("ElectricalOutletsCommentE");

                            b1.Property<int>("ElectricalOutletsE");

                            b1.Property<int>("FloorCarpetB");

                            b1.Property<string>("FloorCarpetCommentB");

                            b1.Property<string>("FloorCarpetCommentE");

                            b1.Property<int>("FloorCarpetE");

                            b1.Property<int>("LightingB");

                            b1.Property<string>("LightingCommentB");

                            b1.Property<string>("LightingCommentE");

                            b1.Property<int>("LightingE");

                            b1.Property<int>("ShowerTubB");

                            b1.Property<string>("ShowerTubCommentB");

                            b1.Property<string>("ShowerTubCommentE");

                            b1.Property<int>("ShowerTubE");

                            b1.Property<int>("SinkB");

                            b1.Property<string>("SinkCommentB");

                            b1.Property<string>("SinkCommentE");

                            b1.Property<int>("SinkE");

                            b1.Property<int>("ToiletB");

                            b1.Property<string>("ToiletCommentB");

                            b1.Property<string>("ToiletCommentE");

                            b1.Property<int>("ToiletE");

                            b1.Property<int>("WallAndTrimeB");

                            b1.Property<int>("WallAndTrimeE");

                            b1.Property<string>("WallAndTrimsCommentB");

                            b1.Property<string>("WallAndTrimsCommentE");

                            b1.Property<int>("WindowsCoveringB");

                            b1.Property<int>("WindowsCoveringCommentB");

                            b1.Property<int>("WindowsCoveringCommentE");

                            b1.Property<int>("WindowsCoveringE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("MainBathroomCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("MainBathroomCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.MainBathroom", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.MasterBedroom", "MasterBedroomCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("CeilingsB");

                            b1.Property<string>("CeilingsCommentB");

                            b1.Property<string>("CeilingsCommentE");

                            b1.Property<int>("CeilingsE");

                            b1.Property<int>("ClosetsB");

                            b1.Property<string>("ClosetsCommentB");

                            b1.Property<string>("ClosetsCommentE");

                            b1.Property<int>("ClosetsE");

                            b1.Property<int>("DoorB");

                            b1.Property<string>("DoorCommentB");

                            b1.Property<string>("DoorCommentE");

                            b1.Property<int>("DoorE");

                            b1.Property<int>("ElectricalOutletsB");

                            b1.Property<string>("ElectricalOutletsCommentB");

                            b1.Property<string>("ElectricalOutletsCommentE");

                            b1.Property<int>("ElectricalOutletsE");

                            b1.Property<int>("FloorCarpetB");

                            b1.Property<string>("FloorCarpetCommentB");

                            b1.Property<string>("FloorCarpetCommentE");

                            b1.Property<int>("FloorCarpetE");

                            b1.Property<int>("LightingB");

                            b1.Property<string>("LightingCommentB");

                            b1.Property<string>("LightingCommentE");

                            b1.Property<int>("LightingE");

                            b1.Property<int>("WallAndTrimeB");

                            b1.Property<int>("WallAndTrimeE");

                            b1.Property<string>("WallAndTrimsCommentB");

                            b1.Property<string>("WallAndTrimsCommentE");

                            b1.Property<int>("WindowsCoveringB");

                            b1.Property<int>("WindowsCoveringCommentB");

                            b1.Property<int>("WindowsCoveringCommentE");

                            b1.Property<int>("WindowsCoveringE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("MasterBedroomCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("MasterBedroomCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.MasterBedroom", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.OtherBedroom", "OtherBedroomCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("CeilingsB");

                            b1.Property<string>("CeilingsCommentB");

                            b1.Property<string>("CeilingsCommentE");

                            b1.Property<int>("CeilingsE");

                            b1.Property<int>("ClosetsB");

                            b1.Property<string>("ClosetsCommentB");

                            b1.Property<string>("ClosetsCommentE");

                            b1.Property<int>("ClosetsE");

                            b1.Property<int>("DoorB");

                            b1.Property<string>("DoorCommentB");

                            b1.Property<string>("DoorCommentE");

                            b1.Property<int>("DoorE");

                            b1.Property<int>("ElectricalOutletsB");

                            b1.Property<string>("ElectricalOutletsCommentB");

                            b1.Property<string>("ElectricalOutletsCommentE");

                            b1.Property<int>("ElectricalOutletsE");

                            b1.Property<int>("FloorCarpetB");

                            b1.Property<string>("FloorCarpetCommentB");

                            b1.Property<string>("FloorCarpetCommentE");

                            b1.Property<int>("FloorCarpetE");

                            b1.Property<int>("LightingB");

                            b1.Property<string>("LightingCommentB");

                            b1.Property<string>("LightingCommentE");

                            b1.Property<int>("LightingE");

                            b1.Property<int>("WallAndTrimeB");

                            b1.Property<int>("WallAndTrimeE");

                            b1.Property<string>("WallAndTrimsCommentB");

                            b1.Property<string>("WallAndTrimsCommentE");

                            b1.Property<int>("WindowsCoveringB");

                            b1.Property<int>("WindowsCoveringCommentB");

                            b1.Property<int>("WindowsCoveringCommentE");

                            b1.Property<int>("WindowsCoveringE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("OtherBedroomCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("OtherBedroomCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.OtherBedroom", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.StairWayHallWay", "StairWayHallWayCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("CeilingsB");

                            b1.Property<string>("CeilingsCommentB");

                            b1.Property<string>("CeilingsCommentE");

                            b1.Property<int>("CeilingsE");

                            b1.Property<int>("ClosetsB");

                            b1.Property<string>("ClosetsCommentB");

                            b1.Property<string>("ClosetsCommentE");

                            b1.Property<int>("ClosetsE");

                            b1.Property<int>("ElectricalOutletsB");

                            b1.Property<string>("ElectricalOutletsCommentB");

                            b1.Property<string>("ElectricalOutletsCommentE");

                            b1.Property<int>("ElectricalOutletsE");

                            b1.Property<int>("LightingB");

                            b1.Property<string>("LightingCommentB");

                            b1.Property<string>("LightingCommentE");

                            b1.Property<int>("LightingE");

                            b1.Property<int>("RailingB");

                            b1.Property<string>("RailingCommentB");

                            b1.Property<string>("RailingCommentE");

                            b1.Property<int>("RailingE");

                            b1.Property<int>("TreadsAndLandingsB");

                            b1.Property<string>("TreadsAndLandingsCommentB");

                            b1.Property<string>("TreadsAndLandingsCommentE");

                            b1.Property<int>("TreadsAndLandingsE");

                            b1.Property<int>("WallAndTrimeB");

                            b1.Property<int>("WallAndTrimeE");

                            b1.Property<string>("WallAndTrimsCommentB");

                            b1.Property<string>("WallAndTrimsCommentE");

                            b1.Property<int>("WindowsCoveringB");

                            b1.Property<int>("WindowsCoveringCommentB");

                            b1.Property<int>("WindowsCoveringCommentE");

                            b1.Property<int>("WindowsCoveringE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("StairWayHallWayCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("StairWayHallWayCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.StairWayHallWay", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.Storage", "StorageCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("ConditionB");

                            b1.Property<string>("ConditionCommentB");

                            b1.Property<string>("ConditionCommentE");

                            b1.Property<int>("ConditionE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("StorageCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("StorageCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.Storage", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.UtilityRoom", "UtilityRoomCondition", b1 =>
                        {
                            b1.Property<int>("PropertyInspectionId");

                            b1.Property<int>("ElectricalOutletsB");

                            b1.Property<string>("ElectricalOutletsCommentB");

                            b1.Property<string>("ElectricalOutletsCommentE");

                            b1.Property<int>("ElectricalOutletsE");

                            b1.Property<int>("WasherDryerB");

                            b1.Property<string>("WasherDryerCommentB");

                            b1.Property<string>("WasherDryerCommentE");

                            b1.Property<int>("WasherDryerE");

                            b1.HasKey("PropertyInspectionId");

                            b1.ToTable("UtilityRoomCondition");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.PropertyInspection")
                                .WithOne("UtilityRoomCondition")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.UtilityRoom", "PropertyInspectionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.PropertyVisit", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.RentalProperty", "RentalProperty")
                        .WithMany("PropertyVisit")
                        .HasForeignKey("RentalPropertyId")
                        .HasConstraintName("FK_PropertyVisit_RentalProperty");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.RentPayment", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.Lease", "Lease")
                        .WithMany("RentPayment")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("FK_RentPayment_Lease");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.RentalProperty", b =>
                {
                    b.OwnsOne("REALWork.LeaseManagementCore.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("RentalPropertyId");

                            b1.Property<string>("City");

                            b1.Property<string>("Country");

                            b1.Property<string>("StateProvince");

                            b1.Property<string>("StreetNum");

                            b1.Property<string>("ZipPostCode");

                            b1.HasKey("RentalPropertyId");

                            b1.ToTable("Address");

                            b1.HasOne("REALWork.LeaseManagementCore.Entities.RentalProperty", "RentalProperty")
                                .WithOne("Address")
                                .HasForeignKey("REALWork.LeaseManagementCore.ValueObjects.Address", "RentalPropertyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.ServiceRequest", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.Lease", "Lease")
                        .WithMany("ServiceRequest")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("FK_ServieRequest_Lease");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.ServiceRequestComment", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.ServiceRequest", "ServiceRequest")
                        .WithMany("ServiceRequestComment")
                        .HasForeignKey("ServiceRequestId")
                        .HasConstraintName("FK_ServiceRequestComment_ServiceRequest");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.Tenant", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.Lease", "Lease")
                        .WithMany("Tenant")
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("FK_Tenant_Lease");
                });

            modelBuilder.Entity("REALWork.LeaseManagementCore.Entities.WorkOrder", b =>
                {
                    b.HasOne("REALWork.LeaseManagementCore.Entities.RentalProperty", "RentalProperty")
                        .WithMany("WorkOrder")
                        .HasForeignKey("RentalPropertyId")
                        .HasConstraintName("FK_WorkOrder_RentalProperty");

                    b.HasOne("REALWork.LeaseManagementCore.Entities.Vendor", "Vendor")
                        .WithMany("WorkOrder")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_WorkOrder_Vendor");
                });
#pragma warning restore 612, 618
        }
    }
}
