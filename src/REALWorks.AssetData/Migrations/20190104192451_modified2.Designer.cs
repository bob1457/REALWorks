// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using REALWorks.AssetData;

namespace REALWorks.AssetData.Migrations
{
    [DbContext(typeof(AppDataBaseContext))]
    [Migration("20190104192451_modified2")]
    partial class modified2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("REALWorks.AssetCore.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<int?>("FurnishingId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsBasementSuite");

                    b.Property<bool>("IsShared");

                    b.Property<DateTime>("Modified");

                    b.Property<int>("PropertyBuildYear");

                    b.Property<string>("PropertyDesc")
                        .HasMaxLength(250);

                    b.Property<int>("PropertyFacilityId");

                    b.Property<int>("PropertyFeatureId");

                    b.Property<string>("PropertyLogoImgUrl")
                        .HasMaxLength(100);

                    b.Property<int?>("PropertyManagerId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("PropertyTypeId");

                    b.Property<string>("PropertyVideoUrl")
                        .HasMaxLength(100);

                    b.Property<int>("RentalStatusId");

                    b.Property<int?>("StrataCouncilId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("REALWorks.AssetCore.Entities.Property", b =>
                {
                    b.OwnsOne("REALWorks.AssetCore.ValueObjects.PropertyAddress", "Address", b1 =>
                        {
                            b1.Property<int?>("PropertyId");

                            b1.Property<string>("GpslatitudeValue");

                            b1.Property<string>("GpslongitudeValue");

                            b1.Property<string>("PropertyCity");

                            b1.Property<string>("PropertyCountry");

                            b1.Property<string>("PropertyNumber");

                            b1.Property<string>("PropertyStateProvince");

                            b1.Property<string>("PropertyStreet");

                            b1.Property<string>("PropertySuiteNumber");

                            b1.Property<string>("PropertyZipPostCode");

                            b1.ToTable("PropertyAddress");

                            b1.HasOne("REALWorks.AssetCore.Entities.Property")
                                .WithOne("Address")
                                .HasForeignKey("REALWorks.AssetCore.ValueObjects.PropertyAddress", "PropertyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
